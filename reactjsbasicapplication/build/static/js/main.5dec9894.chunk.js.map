{"version":3,"sources":["Components/Versions.js","Components/Android.js","App.js","serviceWorker.js","index.js"],"names":["Versions","react_default","a","createElement","className","this","props","version","name","Version","releasedate","APIlevel","Component","Android","version_list","versions","map","versionitem","Components_Versions","key","console","log","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","Components_Android","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8OAgBeA,gMAVX,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACjBH,EAAAC,EAAAC,cAAA,UACEE,KAAKC,MAAMC,QAAQC,KADrB,IAC4BH,KAAKC,MAAMC,QAAQE,QAD/C,IACyDJ,KAAKC,MAAMC,QAAQG,YAD5E,IAC0FL,KAAKC,MAAMC,QAAQI,kBAN5FC,cCoBRC,mLAjBX,IAAIC,EAOJ,OANGT,KAAKC,MAAMS,WACZD,EAAaT,KAAKC,MAAMS,SAASC,IAAK,SAAAC,GACpC,OAAQhB,EAAAC,EAAAC,cAACe,EAAD,CAAUC,IAAKF,EAAYT,KAAQD,QAASU,OAGxDG,QAAQC,IAAIhB,KAAKC,OAEfL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAf,6BAC4BH,EAAAC,EAAAC,cAAA,WAC1BF,EAAAC,EAAAC,cAAA,gDACCW,UAbaF,aCkIPU,cAjIb,SAAAA,IAAa,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAnB,KAAAiB,IACXC,EAAAC,OAAAE,EAAA,EAAAF,CAAAnB,KAAAmB,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAvB,QACKwB,MAAO,CACVd,SAAS,CACP,CACRP,KAAM,cACNC,QAAU,MACVC,YAAa,qBACbC,SAAS,KAED,CAEEH,KAAM,aACNC,QAAU,MACVC,YAAa,mBACbC,SAAS,KAEV,CACEH,KAAM,UACNC,QAAU,MACVC,YAAa,iBACbC,SAAS,KAEZ,CACCH,KAAM,QACNC,QAAU,MACVC,YAAa,qBACbC,SAAS,KAEV,CACEH,KAAM,SACNC,QAAU,MACVC,YAAa,qBACbC,SAAS,OAEV,CAEWH,KAAM,QACNC,QAAU,cACVC,YAAa,eACbC,SAAS,KAEV,CACEH,KAAM,cACNC,QAAU,aACVC,YAAa,mBACbC,SAAS,QAEZ,CACCH,KAAM,YACNC,QAAU,aACVC,YAAa,oBACbC,SAAS,SAGV,CACEH,KAAM,qBACNC,QAAU,mBACVC,YAAa,mBACbC,SAAS,gBAED,CAEEH,KAAM,aACNC,QAAU,mBACVC,YAAa,eACbC,SAAS,gBAEV,CACEH,KAAM,SACNC,QAAU,mBACVC,YAAa,mBACbC,SAAS,gBAEZ,CACCH,KAAM,WACNC,QAAU,mBACVC,YAAa,oBACbC,SAAS,gBAEV,CACEH,KAAM,cACNC,QAAU,mBACVC,YAAa,kBACbC,SAAS,MAOD,CAEEH,KAAM,SACNC,QAAU,mBACVC,YAAa,kBACbC,SAAS,WAEV,CACEH,KAAM,OACNC,QAAU,iBACVC,YAAa,kBACbC,SAAS,WAEZ,CACCH,KAAM,MACNC,QAAU,MACVC,YAAa,iBACbC,SAAU,QA5GlCY,wEAwHX,OACEtB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAf,uCAEEH,EAAAC,EAAAC,cAAC2B,EAAD,CAASvB,QAAQ,SAASQ,SAAUV,KAAKwB,MAAMd,mBA5HrCH,aCQEmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpC,EAAAC,EAAAC,cAACmC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.5dec9894.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport '../stylesheets/versionitem.css';\n\nclass Versions extends Component {\n  render() {\n    \n    return (\n        <div className=\"Versions\">\n      <li >\n       {this.props.version.name}-{this.props.version.Version}-{this.props.version.releasedate}-{this.props.version.APIlevel}\n      </li>\n      </div>\n    );\n  }\n}\n\nexport default Versions;\n","import React, { Component } from 'react';\nimport Versions from './Versions';\n\n\nclass Android extends Component {\n  render() {\n    let version_list;\n    if(this.props.versions){\n      version_list=this.props.versions.map( versionitem  => {\n        return (<Versions key={versionitem.name}   version={versionitem}></Versions>);\n      });\n    }\n    console.log(this.props);\n    return (\n      <div className=\"Android\">\n        Android Version list 2018 <br />\n        <h2>Android versions and its api level</h2>\n        {version_list}\n      </div>\n    );\n  }\n}\n\nexport default Android;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Android from './Components/Android';\n\nclass App extends Component {\n  constructor(){\n    super();\n    this.state= {\n      versions:[\n        {\nname: 'No codename',\nVersion: \t'1.0',\nreleasedate: 'September 23, 2008',\nAPIlevel:'1'\n        },\n        {\n\n          name: 'Petit Four',\n          Version: \t'1.1',\n          releasedate: 'February 9, 2009',\n          APIlevel:'2'\n        },\n         {\n           name: 'Cupcake',\n           Version: \t'1.5',\n           releasedate: 'April 27, 2009',\n           APIlevel:'3'\n         },\n        {\n         name: 'Donut',\n         Version: \t'1.6',\n         releasedate: 'September 15, 2009',\n         APIlevel:'4'\n        },\n        {\n          name: 'Eclair',\n          Version: \t'1.0',\n          releasedate: 'September 23, 2008',\n          APIlevel:'5-7'\n                  },\n         {\n          \n                    name: 'Froyo',\n                    Version: \t'2.2 - 2.2.3',\n                    releasedate: 'May 20, 2010',\n                    APIlevel:'8'\n                  },\n                   {\n                     name: 'Gingerbread',\n                     Version: \t'2.3 -2.3.7',\n                     releasedate: 'December 6, 2010',\n                     APIlevel:'9-10'\n                   },\n                  {\n                   name: 'Honeycomb',\n                   Version: \t'3.0 -3.2.6',\n                   releasedate: 'February 22, 2011',\n                   APIlevel:'11-13'\n                  },\n\n                  {\n                    name: 'Ice Cream Sandwich',\n                    Version: \t'4.0 – 4.0.4',\n                    releasedate: 'October 18, 2011',\n                    APIlevel:'14 – 15'\n                            },\n                            {\n                    \n                              name: 'Jelly Bean',\n                              Version: \t'4.1 – 4.3.1',\n                              releasedate: 'July 9, 2012',\n                              APIlevel:'16 – 18'\n                            },\n                             {\n                               name: 'KitKat',\n                               Version: \t'4.4 – 4.4.4',\n                               releasedate: 'October 31, 2013',\n                               APIlevel:'19 – 20'\n                             },\n                            {\n                             name: 'Lollipop',\n                             Version: \t'5.0 – 5.1.1',\n                             releasedate: 'November 12, 2014',\n                             APIlevel:'21 – 22'\n                            },\n                            {\n                              name: 'Marshmallow',\n                              Version: \t'6.0 – 6.0.1',\n                              releasedate: 'October 5, 2015',\n                              APIlevel:'23'\n                                      },\n                                                              \t\t\n                                     \t\t\n                                     \t\n                                     \t\t\n                                      \t\t\n                                      {\n                              \n                                        name: 'Nougat',\n                                        Version: \t'7.0 – 7.1.2',\n                                        releasedate: 'August 22, 2016',\n                                        APIlevel:'24 - 25'\n                                      },\n                                       {\n                                         name: 'Oreo',\n                                         Version: \t'8.0 – 8.1',\n                                         releasedate: 'August 21, 2017',\n                                         APIlevel:'26 - 27'\n                                       },\n                                      {\n                                       name: 'Pie',\n                                       Version: \t'9.0',\n                                       releasedate: 'August 6, 2018',\n                                       APIlevel: '28'\n                                      }\n          \n                                      \n                                      \t\t\n                                      \n        \n      ]\n    };\n\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        My React Application By Ramesh eerla\n        <Android version='Kitkat' versions={this.state.versions}></Android>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}